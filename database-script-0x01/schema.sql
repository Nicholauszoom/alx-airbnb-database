-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.bookings
(
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    property_id uuid NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    status character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT bookings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.messages
(
    id uuid NOT NULL,
    sender_id uuid NOT NULL,
    receiver_id uuid NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    sent_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT messages_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payments
(
    id uuid NOT NULL,
    booking_id uuid NOT NULL,
    amount numeric(10, 2) NOT NULL,
    payment_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    method character varying(50) COLLATE pg_catalog."default",
    status character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT payments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.properties
(
    id uuid NOT NULL,
    owner_id uuid NOT NULL,
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    location character varying(255) COLLATE pg_catalog."default",
    price numeric(10, 2) NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT properties_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    id uuid NOT NULL,
    reviewer_id uuid NOT NULL,
    property_id uuid NOT NULL,
    rating integer,
    comment text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT reviews_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(150) COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

ALTER TABLE IF EXISTS public.bookings
    ADD CONSTRAINT fk_booking_property FOREIGN KEY (property_id)
    REFERENCES public.properties (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_booking_property
    ON public.bookings(property_id);


ALTER TABLE IF EXISTS public.bookings
    ADD CONSTRAINT fk_booking_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_booking_user
    ON public.bookings(user_id);


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT fk_message_receiver FOREIGN KEY (receiver_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_message_receiver
    ON public.messages(receiver_id);


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT fk_message_sender FOREIGN KEY (sender_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_message_sender
    ON public.messages(sender_id);


ALTER TABLE IF EXISTS public.payments
    ADD CONSTRAINT fk_payment_booking FOREIGN KEY (booking_id)
    REFERENCES public.bookings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_payment_booking
    ON public.payments(booking_id);


ALTER TABLE IF EXISTS public.properties
    ADD CONSTRAINT fk_property_owner FOREIGN KEY (owner_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT fk_review_property FOREIGN KEY (property_id)
    REFERENCES public.properties (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_review_property
    ON public.reviews(property_id);


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT fk_review_reviewer FOREIGN KEY (reviewer_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;